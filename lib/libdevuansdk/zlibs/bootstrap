#!/usr/bin/env zsh
# Copyright (c) 2016-2017 Dyne.org Foundation
# libdevuansdk maintained by Ivan J. <parazyd@dyne.org>
#
# This file is part of libdevuansdk
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

arrs+=(base_packages_option core_packages_option extra_packages_option)
arrs+=(purge_packages_option)
arrs+=(core_packages base_packages extra_packages purge_packages)

bootstrap_complete_base() {
	fn bootstrap_complete_base "$@"
	req=(workdir strapdir os arch release)
	ckreq || return 1

	notice "bootstrapping $os $arch base"
	
	mkdir -p $strapdir	

	export LANG=C
	export LC_ALL=C
	export DEBIAN_FRONTEND=noninteractive

	bootstrap_tgz_stage3="$R/tmp/bootstrap-${os}-${arch}-stage3.tgz"
	bootstrap_tgz_stage4="$R/tmp/bootstrap-${os}-${arch}-stage4.tgz"

	if [[ -n "$TAR_STAGE4" && -f "$bootstrap_tgz_stage4" ]]; then
		notice "using the existing stage4 bootstrap tarball found in $R/tmp"
		bootstrap_tar_unpack "$bootstrap_tgz_stage4" "$strapdir" || {
			die "failed to extract tarball"
			zerr
		}
		return
	elif [[ -f "$bootstrap_tgz_stage3" ]]; then
		notice "using the existing stage3 bootstrap tarball found in $R/tmp"
		bootstrap_tar_unpack "$bootstrap_tgz_stage3" "$strapdir" || {
			die "failed to extract tarball"
			zerr
		}
		return
	fi

	notice "running debootstrap stage 1"

	sudo DEBOOTSTRAP_DIR="$LIBPATH/extra/debootstrap" "$LIBPATH/extra/debootstrap/debootstrap" \
		--keyring="$LIBPATH/extra/devuan-keyring/keyrings/devuan-archive-keyring.gpg" \
		--include=wget,ca-certificates \
		--foreign \
		--arch $arch $release $strapdir $mirror || zerr

	[[ $arch =~ "^arm.." ]] && { qemu_install_user || zerr }

	sudo mkdir -p $strapdir/tmp
	sudo chmod 1777 $strapdir/tmp

	## debootstrap stage 2
	notice "running debootstrap stage 2"
	sudo chroot $strapdir \
		/debootstrap/debootstrap --second-stage || zerr

	## write all system configuration
	notice "writing system configuration"
	conf_print_debconf     | sudo tee $strapdir/debconf.set              >/dev/null
	conf_print_fstab       | sudo tee $strapdir/etc/fstab                >/dev/null
	conf_print_hostname    | sudo tee $strapdir/etc/hostname             >/dev/null
	conf_print_hosts       | sudo tee $strapdir/etc/hosts                >/dev/null
	conf_print_netifaces   | sudo tee $strapdir/etc/network/interfaces   >/dev/null
	conf_print_resolvconf  | sudo tee $strapdir/etc/resolv.conf          >/dev/null
	conf_print_sourceslist | sudo tee $strapdir/etc/apt/sources.list     >/dev/null
	#conf_print_locales     | sudo tee $strapdir/etc/profile.d/locales.sh >/dev/null
}

bootstrap_setup_base() {
	fn bootstrap_setup_base "$@"
	local target="$1"
	req=(workdir strapdir os arch release)
	ckreq || return 1
	
	notice "Installing gnupg-keys and locales"
	
	find $R/extra/gnupg-keys -type f -name "*.asc" -exec cp {} $strapdir/home \;
	
	echo \
"
deb http://${url}${root} ${release} main
deb-src http://${url}${root} ${release} main

deb http://${url}${root} ${release}-updates main
deb-src http://${url}${root} ${release}-updates main

deb http://${url}${root} ${release}-security main
deb-src http://${url}${root} ${release}-security main" > $strapdir/etc/apt/sources.list

	cat << EOF | sudo tee $target/setup_locales >/dev/null
#!/bin/sh	
## setup locales
apt-key add /home/*.asc
rm -f /home/*.asc
apt-get update
apt-get --yes --force-yes install locales
sed -e 's/# en_US.UTF-8/en_US.UTF-8/' -i /etc/locale.gen
locale-gen en_US.UTF-8
update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_CTYPE=en_US.UTF-8
apt-get clean
EOF

	chroot-script -d setup_locales $target || zerr
}

bootstrap_config_thirdstage() {
	fn bootstrap_config_thirdstage
	req=(R os strapdir arch release core_packages base_packages extra_packages)
	ckreq || return 1

	cat << EOF | sudo tee $strapdir/thirdstage >/dev/null
#!/bin/sh
## check if all our core,base and extra packages exist

apt-get update
allpkgs="\$(apt-cache search '.' | cut -d' ' -f1)"

for i in ${core_packages} ; do
	printf "%s" "\$allpkgs" | grep -q "^\$i$" || {
		case "\$i" in
			--*) continue ;;
			*)   missing="\$missing \$i" ;;
		esac
	}
done

[ -n "\$missing" ] && {
	printf "\033[1;31m[!!] some core packages don't exist\033[0m\n"
	printf "%s\n" "\$missing"
	exit 1
}

for i in ${base_packages} ; do
	printf "%s" "\$allpkgs" | grep -q "^\$i$" || {
		case "\$i" in
			--*) continue ;;
			*)   missing="\$missing \$i" ;;
		esac
	}
done

[ -n "\$missing" ] && {
	printf "\033[1;31m[!!] some base packages don't exist\033[0m\n"
	printf "%s\n" "\$missing"
	exit 1
}

for i in ${extra_packages} ; do
	printf "%s" "\$allpkgs" | grep -q "^\$i$" || {
		case "\$i" in
			--*) continue ;;
			*)   missing="\$missing \$i" ;;
		esac
	}
done

[ -n "\$missing" ] && {
	printf "\033[1;31m[!!] some extra packages don't exist\033[0m\n"
	printf "%s\n" "\$missing"
	exit 1
}

dpkg --configure -a

apt-get --yes --force-yes install ${core_packages}
apt-get --yes --force-yes install ${base_packages}
apt-get --yes --force-yes install ${extra_packages}
[[ ${#purge_packages[*]} != 0 ]] && apt-get --yes --force-yes purge ${purge_packages}
apt-get --yes --force-yes autoremove
apt-get clean

rm -f /debconf.set
rm -f /etc/ssh/ssh_host_*
rm -f /root/.bash_history
#echo "1" > .keep
EOF
}

bootstrap_thirdstage() {
	fn bootstrap_thirdstage
	req=(R os strapdir arch release)
	
	## write third-stage for chroot
	bootstrap_config_thirdstage | sudo tee $strapdir/thirdstage >/dev/null

	## chroot into it and configure further
	## debootstrap stage 3
	notice "running debootstrap stage 3"

	chroot-script -d thirdstage || zerr

	#if [[ -n "$TAR_STAGE4" ]]; then
	#	bootstrap_tar_pack   "$bootstrap_tgz_stage3"             || zerr
	#	bootstrap_tar_unpack "$bootstrap_tgz_stage4" "$strapdir" || zerr
	#else
	#	bootstrap_tar_pack   "$bootstrap_tgz_stage3"             || zerr
	#	bootstrap_tar_unpack "$bootstrap_tgz_stage3" "$strapdir" || zerr
	#fi
}	

bootstrap_backup() {
	fn bootstrap_backup "$@"
	local squashfs_backup="$1"
	req=(R os strapdir arch release squashfs_backup)
	
	notice "Creating $squashfs_backup in $workdir/squashfs"
	silly

	case "$arch" in
		amd64|i386)
			_compfilt="-Xbcj x86"
			;;
		arm*)
			_compfilt="-Xbcj arm"
			;;
		*)
			_compfilt=""
			;;
	esac
	
	pushd $workdir
	mkdir -p squashfs
	silly
	[[ -f squashfs/filesystem.squashfs ]] && rm -f squashfs/$squashfs_backup
	sudo mksquashfs $strapdir squashfs/$squashfs_backup \
		-comp xz ${=_compfilt} -noappend || zerr
	popd
	
	ckreq || return 1
}

bootstrap_restore() {
	fn bootstrap_restore "$@"
	local squashfs_backup="$1"
	target="$2"
	req=(R os strapdir arch release squashfs_backups)
	
	notice "Restoring $squashfs_backup in $workdir/$target"
	
	pushd $workdir
	mkdir -p mnt
	mount -t squashfs -o loop squashfs/$squashfs_backup mnt/
	rsync -v -rlt -a mnt/ $target/
	umount mnt/
	rm -rf mnt
	popd	
	
	ckreq || return 1
}

bootstrap_tar_pack() {
	fn bootstrap_tar_pack "$@"
	local bootstrap_tgz="$1"
	req=(bootstrap_tgz)
	ckreq || return 1

	local _dest="$(dirname $bootstrap_tgz)"

	if [[ -f "$bootstrap_tgz" ]]; then
		notice "tarball found already in $_dest"
	else
		notice "Creating boostrap tarball in $bootstrap_tgz"
		silly

		pushd ${strapdir}
		mkdir -p ${_dest}
		silly
		sudo tar czfp $bootstrap_tgz \
			--exclude={./boot,./dev,./sys,./proc} .
		popd
	fi
}

bootstrap_tar_unpack() {
	fn bootstrap_tar_unpack $@
	local bootstrap_tgz="$1"
	req=(strapdir bootstrap_tgz)
	ckreq || return 1

	[[ -n "$TAR_STAGE4" ]] && {
		[[ -f "$bootstrap_tgz" ]] || bootstrap_tgz="$bootstrap_tgz_stage3"
	}
	sudo rm -rf "${strapdir}"/*
	silly
	sudo tar xfp $bootstrap_tgz -C ${strapdir}
	sudo mkdir -p ${strapdir}/{boot,dev,sys,proc}

	conf_print_sourceslist | sudo tee $strapdir/etc/apt/sources.list >/dev/null

	cat <<EOF | sudo tee ${strapdir}/postunpack >/dev/null
#!/bin/sh
apt-get update

## check if all our extra_packages exist
allpkgs="\$(apt-cache search '.' | cut -d' ' -f1)"
for i in ${extra_packages} ; do
	printf "%s" "\$allpkgs" | grep -q "^\$i$" || {
		case "\$i" in
			--*) continue ;;
			*)   missing="\$missing \$i" ;;
		esac
	}
done

[ -n "\$missing" ] && {
	printf "\033[1;31m[!!] some extra packages don't exist\033[0m\n"
	printf "%s\n" "\$missing"
	exit 1
}

apt-get --yes --force-yes upgrade
apt-get --yes --force-yes install ${extra_packages_option} ${extra_packages}
apt-get --yes --force-yes autoremove

apt-get clean
EOF

	chroot-script -d postunpack || zerr

	for i in $inittab; do
		grep -q "^$i" $strapdir/etc/inittab && continue
		print "$i" | sudo tee -a $strapdir/etc/inittab >/dev/null
	done || true

	for i in $custmodules; do
		grep -q "^$i" $strapdir/etc/modules && continue
		print "$i" | sudo tee -a $strapdir/etc/modules >/dev/null
	done || true

	[[ -n "$TAR_STAGE4" ]] && bootstrap_tar_pack "$bootstrap_tgz_stage4" || true
}

blend_bootstrap_setup() {
	fn blend_bootstrap_setup "noop"
	return 0
}
